name: Java CI with Gradle

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ub-ecr-repo

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: 1. CheckOut Source
      uses: actions/checkout@v3

    - name: 2. Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: 3. Change Execute Mode
      run: chmod 775 gradlew
#
    - name: 4. Install MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        host port: 3306
        container port: 3306
        mysql version: '8.0'
        mysql database: 'istory'
        mysql root password: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        mysql username: ${{ secrets.MYSQL_USER }}
        mysql password: ${{ secrets.MYSQL_PASSWORD }}

    - name: 5. Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build

    - name: Configuration AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REGISTRY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REGISTRY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REGISTRY:$IMAGE_TAG"

#    - name: 6. Docker Image Build
#      run: docker build ./xinfra/docker -t ${{ secrets.DOCKER_USERNAME }}/istory -f ./xinfra/docker/Dockerfile
#
#    - name: 7. Docker Login
#      uses: docker/login-action@v3.0.0
#      with:
#        username: ${{ secrets.DOCKER_USERNAME }}
#        password: ${{ secrets.DOCKER_TOKEN }}
#        logout: true
#
#    - name: 8. Docker Push
#      run: docker push ${{ secrets.DOCKER_USERNAME }}/istory
